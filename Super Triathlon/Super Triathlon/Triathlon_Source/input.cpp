#include "input.h"
#include <stdio.h>


//▼グローバル変数
BYTE g_nowKey[256] = {0};		//今回の入力
BYTE g_oldKey[256] = {0};		//前回の入力
BYTE g_buf[256] = {0};			//キーが押されたか、押されていないか取得する変数

//現在のキー入力のコード取得用
BYTE g_Code;

//ボタン入力
JOYINFOEX g_nowJoy = {0};
JOYINFOEX g_prevJoy = {0};

//十字キー
int g_nowLever = 0;	//今回の十字入力
int g_prevLever = 0;	//前回の十字入力

//************************************************************************************************
//更新
//************************************************************************************************
void UpdateInput(){

	int i = 0;
	//入力の更新
	JOYINFOEX joy = {0};

	//入力を取得
	GetKeyboardState(&g_buf[0]);

	//「全キーの更新」要素「256」だけ回す
	for(i = 0; i < 256;i++){

		//i番のg_nowKeyを前回の入力に
		g_oldKey[i] = g_nowKey[i];

		//今回の入力をi番のg_bufから取得
		g_nowKey[i] = g_buf[i] >> 7;

	}
	//前回の入力にg_nowjoyを代入
	g_prevJoy = g_nowJoy;

	//コントローラーの設定
	joy.dwSize = sizeof(JOYINFOEX);

	joy.dwFlags = JOY_RETURNX | 
				  JOY_RETURNY |
				  JOY_RETURNBUTTONS;	

	//入力状況
	if(joyGetPosEx(JOYSTICKID1,&joy)
		!= JOYERR_NOERROR){
			//取得に失敗
			return;
	}
	//取得した状況を今回の入力に反映
	g_nowJoy = joy;

	//前回の十字キー入力にg_nowLeverを代入
	g_prevLever = g_nowLever;

	//今回の十字キー入力リセット
	g_nowLever = 0;

	//取得した入力をもとにg_nowLeverの更新
	if(joy.dwXpos < 15000){
		g_nowLever |= LEVER_LEFT;
	}
	if(joy.dwYpos < 15000){
		g_nowLever |= LEVER_UP;
	}
	if(joy.dwXpos > 50000){
		g_nowLever |= LEVER_RIGHT;
	}
	if(joy.dwYpos > 50000){
		g_nowLever |= LEVER_DOWN;
	}
}



//************************************************************************************************
//押した瞬間　JustKey
//************************************************************************************************
bool JustKey(BYTE code){

	//今回と前回で、code番のキーコードが押されたかで判定
	if(g_oldKey[code] == 0 && g_nowKey[code] == 1){
		//入力されたコード番号を取得
		g_Code = code;
		return true;		//code番のキーを押した瞬間
	}
	return false;			//押した瞬間ではなかった
}


//************************************************************************************************
//キーを離した瞬間を調べる関数
//************************************************************************************************
bool JustUpKey(BYTE code){
	
	//今回の入力と前回の入力でcode番目のキーが離されたかを判定
	if(g_oldKey[code] == 1 && g_nowKey[code] == 0){
		//入力されたコード番号を取得
		g_Code = code;
		return true;	
	}
	return false;
}


//************************************************************************************************
//キーを押しっぱなしかを調べる関数
//************************************************************************************************
bool KeepKey(BYTE code){

	//今回の入力と前回の入力でcode番目のキーが押されたままかを判定
	if(g_oldKey[code] == 1 && g_nowKey[code] == 1){
		//入力されたコード番号を取得
		g_Code = code;
		return true;
	}
	return false;
}

//************************************************************************************************
//押した瞬間
//************************************************************************************************
bool JustButton(int button){
	//引数のボタンが押されたを調べる
	if((g_nowJoy.dwButtons & button) && 
	!(g_prevJoy.dwButtons & button)){
			return true;
	}
	return false;
}

//************************************************************************************************
//ボタンを離した瞬間を調べる関数
//************************************************************************************************
bool JustUpButton(int button){
	
	//今回の入力と前回の入力でbutton番目のキーが離されたかを判定
	if(g_prevJoy.dwButtons & button && 
		!(g_nowJoy.dwButtons & button)){
		return true;	
	}
	return false;
}


//************************************************************************************************
//キーを押しっぱなしかを調べる関数
//************************************************************************************************
bool KeepButton(int button){

	//今回の入力と前回の入力でbutton番目のキーが押されたままかを判定
	if(g_prevJoy.dwButtons & button && g_nowJoy.dwButtons & button){
		return true;
	}
	return false;
}

//************************************************************************************************
//十字キーを押した瞬間
//************************************************************************************************
bool JustLever(int lever){
	
	//引数の方向に押した瞬間を調べる
	if((g_nowLever & lever) &&
		!(g_prevLever & lever)){
		return true;
	}
	return false;
}

//************************************************************************************************
//十字キーを押しっぱなし
//************************************************************************************************
bool KeepLever(int lever){
	
	//引数の方向に押し続けているかを調べる
	if(g_nowLever & lever && g_prevLever & lever){
		return true;
	}
	return false;
}

//************************************************************************************************
//十字キーを離した瞬間
//************************************************************************************************
bool JustUpLever(int lever){
	
	//引数の方向に離した瞬間を調べる
	if((g_prevLever & lever) &&
		!(g_nowLever & lever)){
		return true;
	}
	return false;
}

/*
今回の入力コードを返す
*/
BYTE	GetInputKeyCode() { return g_Code; } 